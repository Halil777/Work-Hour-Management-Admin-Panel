import { createContext, useContext, useState, type ReactNode } from "react";

type Lang = "ru" | "en" | "tr";

const translations: Record<Lang, Record<string, string>> = {
  ru: {
    appTitle: "Esta Construction",
    menuDashboard: "Dashboard",
    menuUsers: "Users",
    menuFeedbacks: "Feedbacks",
    menuWorkerHours: "Рабочие часы",
    menuUploads: "Загрузки",
    menuDisconnect: "Отключить",
    searchPlaceholder: "Поиск...",
    usersTitle: "Users",
    usersId: "ID",
    usersName: "Name",
    usersPosition: "Position",
    usersStatus: "Status",
    usersTelegram: "Telegram",
    usersCreatedAt: "Created At",
    usersLinked: "Linked",
    usersUnlinked: "Unlinked",
    usersUpdating: "Обновление...",
    workerHoursTitle: "Рабочие часы",
    workerHoursRecords: "{{count}} записей",
    workerHoursUser: "Пользователь",
    workerHoursPosition: "Должность",
    workerHoursDate: "Дата",
    workerHoursHours: "Часы",
    disconnectTitle: "Отключить Telegram",
    disconnectTelegramId: "Telegram ID",
    disconnectRequired: "Telegram ID обязателен",
    disconnectButton: "Отключить",
    disconnectFailed: "Не удалось отключить Telegram ID",
    uploadsDateLabel: "Выберите дату",
    uploadsDrag: "Перетащите Excel файл или нажмите для выбора",
    uploadsDrop: "Отпустите файл здесь...",
    uploadsSupport: "Поддерживаются только .xlsx и .xls",
    uploadsRemoveFile: "Файл удалён",
    uploadsCancel: "Загрузка отменена ❌",
    uploadsSelectFile: 'Файл "{{file}}" выбран',
    uploadsOnlyExcel: "Разрешены только Excel файлы (.xlsx, .xls)",
    uploadsNoFileOrDate: "Не выбран файл или дата",
    uploadsUpload: "Загрузить Excel",
    uploadsUploading: "Загружается...",
    copied: "Скопировано",
    feedbacksShown: "Показано {{count}} сообщение(й) с неверным временем",
    feedbacksUser: "Пользователь",
    feedbacksPosition: "Должность",
    feedbacksTelegram: "Телеграм",
    feedbacksMessage: "Сообщение",
    feedbacksActions: "Действия",
    feedbacksNone: "Нет обратной связи по неверному времени",
    copyName: "Скопировать имя",
    copyTelegram: "Скопировать Telegram ID",
    nameLabel: "Имя",
    telegramIdLabel: "Telegram ID",
    feedbacksWorkerReported: "Рабочий указал",
    hoursShort: "ч.",
    searchByName: "Поиск по имени",
    filterByDate: "Фильтр по дате",
    reset: "Сбросить",
    statsTotalUsers: "Всего пользователей",
    statsLinkedUsers: "Связанные пользователи",
    statsUnlinkedUsers: "Несвязанные пользователи",
    statsTodayFeedbacks: "Сегодняшние отзывы",
    chartUsersLinked: "Пользователи связаны vs не связаны",
  },
  en: {
    appTitle: "Esta Construction",
    menuDashboard: "Dashboard",
    menuUsers: "Users",
    menuFeedbacks: "Feedbacks",
    menuWorkerHours: "Worker Hours",
    menuUploads: "Uploads",
    menuDisconnect: "Disconnect",
    searchPlaceholder: "Search...",
    usersTitle: "Users",
    usersId: "ID",
    usersName: "Name",
    usersPosition: "Position",
    usersStatus: "Status",
    usersTelegram: "Telegram",
    usersCreatedAt: "Created At",
    usersLinked: "Linked",
    usersUnlinked: "Unlinked",
    usersUpdating: "Updating...",
    workerHoursTitle: "Worker Hours",
    workerHoursRecords: "{{count}} records",
    workerHoursUser: "User",
    workerHoursPosition: "Position",
    workerHoursDate: "Date",
    workerHoursHours: "Hours",
    disconnectTitle: "Disconnect Telegram",
    disconnectTelegramId: "Telegram ID",
    disconnectRequired: "Telegram ID is required",
    disconnectButton: "Disconnect",
    disconnectFailed: "Failed to disconnect Telegram ID",
    uploadsDateLabel: "Select date",
    uploadsDrag: "Drag and drop an Excel file or click to select",
    uploadsDrop: "Drop the file here...",
    uploadsSupport: "Only .xlsx and .xls are supported",
    uploadsRemoveFile: "File removed",
    uploadsCancel: "Upload cancelled ❌",
    uploadsSelectFile: 'File "{{file}}" selected',
    uploadsOnlyExcel: "Only Excel files (.xlsx, .xls) are allowed",
    uploadsNoFileOrDate: "No file or date selected",
    uploadsUpload: "Upload Excel",
    uploadsUploading: "Uploading...",
    copied: "Copied",
    feedbacksShown: "Showing {{count}} message(s) with incorrect time",
    feedbacksUser: "User",
    feedbacksPosition: "Position",
    feedbacksTelegram: "Telegram",
    feedbacksMessage: "Message",
    feedbacksActions: "Actions",
    feedbacksNone: "No feedback with incorrect time",
    copyName: "Copy name",
    copyTelegram: "Copy Telegram ID",
    nameLabel: "Name",
    telegramIdLabel: "Telegram ID",
    feedbacksWorkerReported: "Worker reported",
    hoursShort: "h",
    searchByName: "Search by name",
    filterByDate: "Filter by date",
    reset: "Reset",
    statsTotalUsers: "Total Users",
    statsLinkedUsers: "Linked Users",
    statsUnlinkedUsers: "Unlinked Users",
    statsTodayFeedbacks: "Today Feedbacks",
    chartUsersLinked: "Users Linked vs Unlinked",
  },
  tr: {
    appTitle: "Esta Construction",
    menuDashboard: "Gösterge Paneli",
    menuUsers: "Kullanıcılar",
    menuFeedbacks: "Geri Bildirimler",
    menuWorkerHours: "Çalışma Saatleri",
    menuUploads: "Yüklemeler",
    menuDisconnect: "Bağlantıyı Kes",
    searchPlaceholder: "Ara...",
    usersTitle: "Kullanıcılar",
    usersId: "ID",
    usersName: "Adı",
    usersPosition: "Pozisyon",
    usersStatus: "Durum",
    usersTelegram: "Telegram",
    usersCreatedAt: "Oluşturulma",
    usersLinked: "Bağlı",
    usersUnlinked: "Bağsız",
    usersUpdating: "Güncelleniyor...",
    workerHoursTitle: "Çalışma Saatleri",
    workerHoursRecords: "{{count}} kayıt",
    workerHoursUser: "Kullanıcı",
    workerHoursPosition: "Pozisyon",
    workerHoursDate: "Tarih",
    workerHoursHours: "Saat",
    disconnectTitle: "Telegram'ı Ayır",
    disconnectTelegramId: "Telegram ID",
    disconnectRequired: "Telegram ID gerekli",
    disconnectButton: "Bağlantıyı Kes",
    disconnectFailed: "Telegram ID bağlantısı kesilemedi",
    uploadsDateLabel: "Tarih seçin",
    uploadsDrag: "Excel dosyasını sürükleyip bırakın veya seçmek için tıklayın",
    uploadsDrop: "Dosyayı buraya bırakın...",
    uploadsSupport: "Sadece .xlsx ve .xls desteklenir",
    uploadsRemoveFile: "Dosya silindi",
    uploadsCancel: "Yükleme iptal edildi ❌",
    uploadsSelectFile: '"{{file}}" dosyası seçildi',
    uploadsOnlyExcel: "Sadece Excel dosyalarına (.xlsx, .xls) izin verilir",
    uploadsNoFileOrDate: "Dosya veya tarih seçilmedi",
    uploadsUpload: "Excel Yükle",
    uploadsUploading: "Yükleniyor...",
    copied: "Kopyalandı",
    feedbacksShown: "{{count}} yanlış zamanlı mesaj gösteriliyor",
    feedbacksUser: "Kullanıcı",
    feedbacksPosition: "Pozisyon",
    feedbacksTelegram: "Telegram",
    feedbacksMessage: "Mesaj",
    feedbacksActions: "Eylemler",
    feedbacksNone: "Yanlış zamanlı geri bildirim yok",
    copyName: "İsmi kopyala",
    copyTelegram: "Telegram ID kopyala",
    nameLabel: "İsim",
    telegramIdLabel: "Telegram ID",
    feedbacksWorkerReported: "İşçi bildirdi",
    hoursShort: "sa.",
    searchByName: "İsme göre ara",
    filterByDate: "Tarihe göre filtrele",
    reset: "Sıfırla",
    statsTotalUsers: "Toplam Kullanıcı",
    statsLinkedUsers: "Bağlı Kullanıcılar",
    statsUnlinkedUsers: "Bağsız Kullanıcılar",
    statsTodayFeedbacks: "Bugünkü Geri Bildirimler",
    chartUsersLinked: "Bağlı vs Bağsız Kullanıcılar",
  },
};

type Context = {
  lang: Lang;
  setLang: (l: Lang) => void;
  t: (key: string, vars?: Record<string, string | number>) => string;
};

const LanguageContext = createContext<Context>({
  lang: "ru",
  setLang: () => {},
  t: (key: string) => key,
});

export function LanguageProvider({ children }: { children: ReactNode }) {
  const [lang, setLang] = useState<Lang>("ru");

  const t = (key: string, vars?: Record<string, string | number>) => {
    const str = translations[lang][key] || translations.ru[key] || key;
    if (!vars) return str;
    return str.replace(/{{(\w+)}}/g, (_, v) => String(vars[v] ?? ""));
  };

  return (
    <LanguageContext.Provider value={{ lang, setLang, t }}>
      {children}
    </LanguageContext.Provider>
  );
}

// eslint-disable-next-line react-refresh/only-export-components
export function useTranslation() {
  return useContext(LanguageContext);
}
